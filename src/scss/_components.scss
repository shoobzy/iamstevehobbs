// A component (namespace: c-) is a small feature that makes up a part of the website. Think buttons, accordions, sliders,
// modal dialogs, etc. Each component is fully functional by itself and does not rely on any other components. This fact
// should be considered when you name the component.
//
// For example, the button in the main section from the example above shouldnâ€™t be called .c-main-button because main
// scopes it inside the main section and limits the use of it in other places, like a sidebar. Something like .c-btn
// is much nicer because the button is no longer tied to any other specific sections of the page.
//
// If you need any extra features, you can always extend properties with a BEM modifier (combining powers!) or use Scope,
// which is coming up in a bit.

// fullstackreact.com/30-days-of-react
:root {
  --firstColor: rgba(0, 169, 158, 1);
  --secondColor: rgba(0, 191, 150, 1);
  --textColor: #FFF;
};

.clock {
  position: relative;
  border-radius: 0.5em;
  margin: 10px auto;
  font-family: 'Open Sans', sans-serif;
  text-align: center;
  font-size: 60px;
  color: var(--textColor);
  line-height: 2.0em;
  background: #eee;

    /* Old browsers */
  background: var(--firstColor);
  /* W3C */

  .title {
    font-size: 0.2em;
  }
}

@media only screen and (min-width: 700px) and (max-width: 1000px){
  .clock{
    font-size: 50px;
  }
}

@media only screen and (min-width: 500px) and (max-width: 699px){
   .clock{
    font-size: 45px;
  }
}

@media only screen and (min-width: 200px) and (max-width: 499px){
   .clock{
    font-size: 40px;
  }
}
