// A lot of developers/engineers use the terms component and pattern synonymously and thatâ€™s totally fine if you are
// more comfortable with that. It is just my preference to separate those two terms.
//
// For a general rule of thumb, I think of a pattern (namespace: p-) as a combination of components but in a way
// that is not scaleable.
//
// For example, I would consider the accordion as a component. It is scaleable and reusable on its own, meaning
// that it can be used in other parts of the website without making any changes even if the accordion would contain other components such as buttons.
//
// On the other hand, the header, for example, would be a pattern because it is not scaleable (the header cannot be used
// in the content or sidebar area) and also contains other components such as buttons, accordions, menus, logos, search form etc.
//
.p-Nav {
    padding: 0;
    font-size: 0;

    a {
        position: relative;
        margin-left: $o-gutter * 1.5;
        padding-bottom: 13px;
        font-size: $base-font-size;
        font-family: $futura-bold;
        line-height: $base-line-height;
        letter-spacing: $base-font-size * .1875;
        text-transform: uppercase;

        @include for-phone-only {
            margin-left: $base-font-size;
        }

        &:first-child {
            margin-left: 0;
        }

        &::after {
            @include cubic-transition;
            position: absolute;
            width: 0;
            height: 2px;
            bottom: 0;
            left: 0;
            background: $ink;
            backface-visibility: hidden;
            content: "";

            // Review this
            @at-root body.u-DarkMode & {
                background: $white;
            }
        }

        &.active::after,
        &:hover::after {
            width: 100%;
        }
    }
}

.p-Nav--Inner {
    padding-top: $o-gutter * 1.5;
    padding-bottom: $o-gutter * 1.5;
}

.p-Nav--Item {
    @include for-phone-only {
        padding-bottom: $base-font-size;
    }
}
